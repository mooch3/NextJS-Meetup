{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/smithdc/Desktop/MeetUp-NextJs/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = () => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Mount_Rainier_overlooking_the_Port_of_Tacoma.jpg/2560px-Mount_Rainier_overlooking_the_Port_of_Tacoma.jpg\",\n    descripton: \"A new meetup\",\n    title: \"First meet up\",\n    address: \"12345 Tacoma Ave\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}; // if using getStaticProps in a dynamic page must export getStaticPaths\n// tells next js for which dynamic parameter values this page should be pregenerated\n\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\"mongodb+srv://admin-smithdc:BdiyNjdBKqvZaPrC@meetupdatabase.fwbit.mongodb.net/meetups?retryWrites=true&w=majority\", {\n    useUnifiedTopology: true\n  });\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close(); // generate array dynamically\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  // fetch data for single meet up\n  const meetupId = context.params.meetupId;\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/smithdc/Desktop/MeetUp-NextJs/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","getStaticPaths","client","connect","useUnifiedTopology","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","props","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAC,oKADR;AAEE,IAAA,UAAU,EAAC,cAFb;AAGE,IAAA,KAAK,EAAC,eAHR;AAIE,IAAA,OAAO,EAAC;AAJV;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CATD,C,CAUA;AACA;;;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,OAAZ,CACnB,mHADmB,EACkG;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GADlG,CAArB;AAGA,QAAMC,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAT,EAAAA,MAAM,CAACU,KAAP,GAVwC,CAWxC;;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,CAlBM;AAoBP,OAAO,MAAMC,cAAc,GAAG,MAAOC,OAAP,IAAmB;AAC/C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMb,EAAE,GAAGH,MAAM,CAACG,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEQ;AAAN,GAA1B,CAA7B;AAEAhB,EAAAA,MAAM,CAACU,KAAP;AAEA,SAAO;AACLY,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEH;AADP;AADF,GAAP;AAKD,CAjBM;AAmBP,eAAetB,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = () => {\n  return (\n    <MeetupDetail\n      image=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b2/Mount_Rainier_overlooking_the_Port_of_Tacoma.jpg/2560px-Mount_Rainier_overlooking_the_Port_of_Tacoma.jpg\"\n      descripton=\"A new meetup\"\n      title=\"First meet up\"\n      address=\"12345 Tacoma Ave\"\n    />\n  );\n};\n// if using getStaticProps in a dynamic page must export getStaticPaths\n// tells next js for which dynamic parameter values this page should be pregenerated\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin-smithdc:BdiyNjdBKqvZaPrC@meetupdatabase.fwbit.mongodb.net/meetups?retryWrites=true&w=majority\", { useUnifiedTopology: true }\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n  // generate array dynamically\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // fetch data for single meet up\n  const meetupId = context.params.meetupId;\n  \n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetup = await meetupsCollection.findOne({_id: meetupId});\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: selectedMeetup,\n    },\n  };\n};\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}