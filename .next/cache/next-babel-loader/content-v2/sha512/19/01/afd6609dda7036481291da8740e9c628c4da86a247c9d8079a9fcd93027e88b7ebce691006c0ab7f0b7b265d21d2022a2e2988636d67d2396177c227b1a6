{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/smithdc/Desktop/MeetUp-NextJs/pages/[meetupId]/index.js\",\n    _this = this;\n\nimport Head from \"next/head\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nvar MeetupDetails = function MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      descripton: props.meetupData.description,\n      title: props.meetupData.title,\n      address: props.meetupData.address\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n}; // if using getStaticProps in a dynamic page must export getStaticPaths\n// tells next js for which dynamic parameter values this page should be pregenerated\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["/Users/smithdc/Desktop/MeetUp-NextJs/pages/[meetupId]/index.js"],"names":["Head","MeetupDetail","MeetupDetails","props","meetupData","title","description","image","address"],"mappings":";;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AAGA,OAAOC,YAAP,MAAyB,uCAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC,UAAN,CAAiBC;AAAzB;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBE;AAAnD;AAAA;AAAA;AAAA;AAAA,eAFF;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBG,KAD1B;AAEE,MAAA,UAAU,EAAEJ,KAAK,CAACC,UAAN,CAAiBE,WAF/B;AAGE,MAAA,KAAK,EAAEH,KAAK,CAACC,UAAN,CAAiBC,KAH1B;AAIE,MAAA,OAAO,EAAEF,KAAK,CAACC,UAAN,CAAiBI;AAJ5B;AAAA;AAAA;AAAA;AAAA,aALF;AAAA,kBADF;AAcD,CAfD,C,CAgBA;AACA;;;KAjBMN,a;;AAwEN,eAAeA,aAAf","sourcesContent":["import Head from \"next/head\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nconst MeetupDetails = (props) => {\n  return (\n    <>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name=\"description\" content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        descripton={props.meetupData.description}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n      />\n    </>\n  );\n};\n// if using getStaticProps in a dynamic page must export getStaticPaths\n// tells next js for which dynamic parameter values this page should be pregenerated\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin-smithdc:BdiyNjdBKqvZaPrC@meetupdatabase.fwbit.mongodb.net/meetups?retryWrites=true&w=majority\",\n    { useUnifiedTopology: true }\n  );\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n  // generate array dynamically\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  // fetch data for single meet up\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://admin-smithdc:BdiyNjdBKqvZaPrC@meetupdatabase.fwbit.mongodb.net/meetups?retryWrites=true&w=majority\",\n    { useUnifiedTopology: true }\n  );\n\n  const db = client.db();\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        description: selectedMeetup.description,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n      },\n    },\n  };\n};\n\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}